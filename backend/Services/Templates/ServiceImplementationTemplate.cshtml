@model string
//
<auto-generated />
using Portfolio2.Data;
using Portfolio2.Models.DTOs;
using Portfolio2.Models.Entities;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;

namespace Portfolio2.Services
{
    public class @(Model)Service : I@(Model)Service
    {
        private readonly AppDbContext _context;

        public @(Model)Service(AppDbContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<@(Model)Dto>> GetAllAsync()
        {
            return await _context.@(Model)s
                .Select(e => new @(Model)Dto
                {
                    Id = e.Id,
                    // Adicione outros campos aqui
                })
                .ToListAsync();
        }

        public async Task<@(Model)Dto?> GetByIdAsync(int id)
        {
            var entity = await _context.@(Model)s.FindAsync(id);
            return entity != null ? new @(Model)Dto
            {
                Id = entity.Id,
                // Mapear outros campos
            } : null;
        }

        public async Task<@(Model)Dto> CreateAsync(@(Model)CreateDto dto)
        {
            var entity = new @(Model)
            {
                // Mapear campos do DTO para a entidade
            };

            _context.@(Model)s.Add(entity);
            await _context.SaveChangesAsync();

            return new @(Model)Dto
            {
                Id = entity.Id,
                // Mapear de volta para DTO
            };
        }

        public async Task<bool> UpdateAsync(int id, @(Model)UpdateDto dto)
        {
            var entity = await _context.@(Model)s.FindAsync(id);
            if (entity == null) return false;

            // Atualizar campos da entidade
            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> DeleteAsync(int id)
        {
            var entity = await _context.@(Model)s.FindAsync(id);
            if (entity == null) return false;

            _context.@(Model)s.Remove(entity);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}