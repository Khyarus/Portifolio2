@model string
//
<auto-generated />
using Xunit;
using Moq;
using Portfolio2.Controllers;
using Portfolio2.Services;
using Portfolio2.Models.DTOs;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Portfolio2.Tests.Controllers
{
    public class @(Model)ControllerTests
    {
        private readonly Mock<I@(Model)Service>
    _mockService;
    private readonly @(Model)Controller _controller;

    public @(Model)ControllerTests()
    {
    _mockService = new Mock<I@(Model)Service>
        ();
        _controller = new @(Model)Controller(_mockService.Object);
        }

        [Fact]
        public async Task GetAll_ReturnsOkResult()
        {
        // Arrange
        _mockService.Setup(s => s.GetAllAsync())
        .ReturnsAsync(new List<@(Model)Dto>
            ());

            // Act
            var result = await _controller.GetAll();

            // Assert
            Assert.IsType<OkObjectResult>
                (result);
                }

                [Fact]
                public async Task GetById_ReturnsNotFound_WhenItemDoesNotExist()
                {
                // Arrange
                _mockService.Setup(s => s.GetByIdAsync(It.IsAny<int>
                    ()))
                    .ReturnsAsync((@(Model)Dto?)null);

                    // Act
                    var result = await _controller.GetById(1);

                    // Assert
                    Assert.IsType<NotFoundResult>
                        (result);
                        }

                        // Adicione mais testes para outros métodos
                        }
                        }
